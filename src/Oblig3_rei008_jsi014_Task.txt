Task 4

The Singleton-Pattern
The code in the uses a Singleton pattern, this can often be a bad thing. Singleton patterns tends to increase the coupling between
the classes. this high coupling might result in the code being more difficult to handle(maintain and making changes). In worst case,
by making a change in one part of the code, might cause problems throughout the system.

Testability
The technical specifications in the project have a significant low amount of methods which actually return values. A lot of the working
of the program runs behind the scenes, which makes it hard to pinpoint an error. Especially makeNextMove, is a big chunk of code, that
doesen't return a value, it justs sends it to the GameMaster to be handled there.

Overall
The program is tightly coupled, and has a low testability because of methods that performs more than one task, and sends information
across classes with void methods. Aswell as having some questionable inputs, like Player.gameOver(earnedPoints), this seems counter intuitive,
and the method isnt self explanatory enough.






